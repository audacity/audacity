@prefix ev:   <http://lv2plug.in/ns/ext/event#> .
@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

<http://lv2plug.in/ns/ext/event>
	a owl:Ontology ;
	owl:deprecated true ;
	rdfs:seeAlso <event.h> ,
		<event-helpers.h> ,
		<lv2-event.doap.ttl> ;
	lv2:documentation """
<p>This extension defines a generic time-stamped event port type, which can be
used to create plugins that read and write real-time events, such as MIDI,
OSC, or any other type of event payload.  The type(s) of event supported by
a port is defined in the data file for a plugin, for example:</p>
<pre class="turtle-code">
&lt;http://example.org/some-plugin&gt;
    lv2:port [
        a ev:EventPort, lv2:InputPort ;
        lv2:index 0 ;
        ev:supportsEvent &lt;http://lv2plug.in/ns/ext/midi#MidiEvent&gt; ;
        lv2:symbol "midi_input" ;
        lv2:name "MIDI input" ;
    ] .
</pre>
""" .

ev:EventPort
	a rdfs:Class ;
	rdfs:label "Event Port" ;
	rdfs:subClassOf lv2:Port ;
	rdfs:comment """Ports of this type will be connected to a struct of type LV2_Event_Buffer, defined in event.h.  These ports contain a sequence of generic events (possibly several types mixed in a single stream), the specific types of which are defined by some URI in another LV2 extension.""" .

ev:Event
	a rdfs:Class ;
	rdfs:label "Event" ;
	rdfs:comment """A single generic time-stamped event.

An ev:EventPort contains an LV2_Event_Buffer which contains a sequence of these events.  The binary format of LV2 events is defined by the LV2_Event struct in event.h.

Specific event types (e.g. MIDI, OSC) are defined by extensions, and should be rdfs:subClassOf this class.""" .

ev:TimeStamp
	a rdfs:Class ;
	rdfs:label "Event Time Stamp" ;
	rdfs:comment """The time stamp of an Event.

This defines the meaning of the 'frames' and 'subframes' fields of an LV2_Event (both unsigned 32-bit integers).""" .

ev:FrameStamp
	a rdfs:Class ;
	rdfs:subClassOf ev:TimeStamp ;
	rdfs:label "Audio Frame Time Stamp" ;
	rdfs:comment """The default time stamp unit for an LV2 event: the frames field represents
audio frames (in the sample rate passed to intantiate), and the subframes
field is 1/UINT32_MAX of a frame.""" .

ev:generic
	a lv2:PortProperty ;
	rdfs:label "generic event port" ;
	rdfs:comment """Indicates that this port does something meaningful for any event type (e.g. event mixers, delays, serialisers, etc).

If this property is set, hosts should consider the port suitable for any type of event.  Otherwise, hosts should consider the port 'appropriate' only for the specific event types listed with :supportsEvent.  Note that plugins must gracefully handle unknown event types whether or not this property is present.""" .

ev:supportsEvent
	a rdf:Property ;
	rdfs:domain ev:EventPort ;
	rdfs:range rdfs:Class ;
	rdfs:label "supports event type" ;
	rdfs:comment """Indicates that this port supports or "understands" a certain event type.

For input ports, this means the plugin understands and does something useful with events of this type.  For output ports, this means the plugin may generate events of this type.  If the plugin never actually generates events of this type, but might pass them through from an input, this property should not be set (use ev:inheritsEvent for that).

Plugins with event input ports must always gracefully handle any type of event, even if it does not 'support' it.  This property should always be set for event types the plugin understands/generates so hosts can discover plugins appropriate for a given scenario (e.g. plugins with a MIDI input). Hosts are not expected to consider event ports suitable for some type of event if the relevant :supportsEvent property is not set, unless the ev:generic property for that port is also set.""" .

ev:inheritsEvent
	a rdf:Property ;
	rdfs:domain ev:EventPort ,
		lv2:OutputPort ;
	rdfs:range lv2:Port ;
	rdfs:label "inherits event type" ;
	rdfs:comment """Indicates that this output port might pass through events that arrived at some other input port (or generate an event of the same type as events arriving at that input).  The host must always check the stamp type of all outputs when connecting an input, but this property should be set whenever it applies.""" .

ev:supportsTimeStamp
	a rdf:Property ;
	rdfs:domain ev:EventPort ,
		lv2:InputPort ;
	rdfs:range rdfs:Class ;
	rdfs:label "supports time stamp type" ;
	rdfs:comment """Indicates that this port supports or "understands" a certain time stamp type.  Meaningful only for input ports, the host must never connect a port to an event buffer with a time stamp type that isn't supported by the port.""" .

ev:generatesTimeStamp
	a rdf:Property ;
	rdfs:domain ev:EventPort ,
		lv2:OutputPort ;
	rdfs:range rdfs:Class ;
	rdfs:label "generates time stamp type" ;
	rdfs:comment """Indicates that this port may output a certain time stamp type, regardless of the time stamp type of any input ports.

If the port outputs stamps based on what type inputs are connected to, this property should not be set (use the ev:inheritsTimeStamp property for that).  Hosts MUST check the time_stamp value of any output port buffers after a call to connect_port on ANY event input port on the plugin.

If the plugin changes the stamp_type field of an output event buffer during a call to run(), the plugin must call the stamp_type_changed function provided by the host in the LV2_Event_Feature struct, if it is non-NULL.""" .

ev:inheritsTimeStamp
	a rdf:Property ;
	rdfs:domain ev:EventPort ,
		lv2:OutputPort ;
	rdfs:range lv2:Port ;
	rdfs:label "inherits time stamp type" ;
	rdfs:comment """Indicates that this port follows the time stamp type of an input port.

This property is not necessary, but it should be set for outputs that base their output type on an input port so the host can make more sense of the plugin and provide a more sensible interface.""" .
